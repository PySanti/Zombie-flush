# all the code made by Santiago De Andrade between 06/2021 and 08/2021

def print_menu(lista_a_imprimir                : list, 
                    caracter_de_seleccion           = ' <', 
                    caracter_arriba                 = 'w',
                    caracter_abajo                  = 's' , 
                    caracter_de_ejecucion           = '\n',
                    caracter_de_guionizacion        = '~ ',
                    indice_de_comienzo              = None, 
                    mensaje                         = None,
                    color_para_linea_seleccionada   = True,
                    efecto_de_movimiento            = True) -> int:
    """
    Imprime la lista que se le pase en el primer parametro en forma de menu
    permitiendo acceder a las opciones interactivamente
    Arg[1] : lista que se desea imprimir
    Arg[2] : caracter que se desea emplear 
    para simbolizar la opcion seleccionada en el momento,
    ' < ' en caso de no especificarse
    Arg[3] : caracter que debera presionarse para
    mover el cursor a la opcion de arriba, 'w' en caso 
    de no especificarse 
    Arg[4] : caracter que debera presionarse para 
    mover el cursor a la opcion de abajo, 's' en caso de 
    no especificarse
    Arg[5]: caracter que debera presionarse para ejecutar 
    la opcion que se desee. 'r' en caso de no especificarse
    Arg[6] : caracter que se desea colocar a la izquierda de cada 
    una de las opciones, '~ ' por defecto
    Arg[7] : indice de la lista de seleccion por default, en caso 
    de no especificarse, se empieza por la mitad
    Agr[8] : mensaje que se desee imprimir de guia para el usuario
    Arg[9] : en caso de que sea True, la linea que este seleccionada
    se pondra a color (solo valido para listas de una longitud menor a 
    30), notese que, en caso de que esta opcion se seleccione, el caracter 
    de seleccion no se empleara
    Arg[10]: en caso de que esta opcion sea True, al seleccionarse una opcion esta
    hara un leve movimiento que permitira visualizar facilmente la linea que se seleccione

    Retorna el numero de la eleccion que fue seleccionada (indice + 1)
    
    Nota: enviar None para emplear los valores por defecto en caso de querer usarlos
    """
    try:
        from getch import getch 
        from os import system
        from sys import path
        caracter_de_seleccion    = caracter_de_seleccion if caracter_de_seleccion == ' <' else str(caracter_de_seleccion)
        indice_de_comienzo       = len(lista_a_imprimir)//2 if indice_de_comienzo ==  None else int(indice_de_comienzo)
        caracter_arriba          = caracter_arriba if caracter_arriba == 'w' else str(caracter_arriba)
        caracter_abajo           = caracter_abajo if caracter_abajo == 's' else str(caracter_abajo)
        caracter_de_ejecucion    = caracter_de_ejecucion if caracter_de_ejecucion == '\n' else str(caracter_de_ejecucion)
        caracter_de_guionizacion = caracter_de_guionizacion if caracter_de_guionizacion == '~' else str(caracter_de_guionizacion)
        mensaje                  = None if mensaje == None else str(mensaje)
        lista_a_imprimir_copia   = [str(i) for i in lista_a_imprimir]
        print(path)
        if color_para_linea_seleccionada:
            import colorama
            from colorama import Back, Fore, Style
            colorama.init()
        if len(lista_a_imprimir) == 0:
            raise Exception
    except (ModuleNotFoundError, ValueError):
        print("""
            Error en la funcion ideas.imprimir_menu
            Posibles candidatos ...
                - Mal uso del parametro caracter_de_seleccion
                - Mal uso del parametro caracter_arriba
                - Mal uso del parametro caracter_abajo
                - Mal uso del parametro caracter_de_ejecucion
                - Mal uso del parametro caracter_de_guionizacion
                - Mal uso del parametro indice_de_comienzo
                - Mal uso del parametro mensaje
                - Lista a imprimir vacia 
                - Error al importar la funcion getch.getch
                - Error al importar la funcion os.system
                - Error al importar el modulo colorama (en caso de que la opcion color_para_linea_seleccionada este activada)
            """)
        print
        quit()

    if len(lista_a_imprimir_copia) == 1:
        pass
    else:
        def seleccion_actual():
            # Revisa toda la lista en busca de la cadena 
            # seleccionada en ese momento en caso de encontrar 
            # una seleccionada retorna el numero de indice en 
            # cuestion, en caso contrario retorna False
            iterador = 0
            for i in lista_a_imprimir_copia:
                if cadena_seleccionada(i):
                    return iterador
                else:
                    iterador += 1
            return False
        def sobreescribir_puntero(indice : int) -> None:
            # recibe el indice de la cadena que se desea sobrescribir y lo sobreescribe
            cadena_actual = lista_a_imprimir_copia[indice][:len(caracter_de_seleccion)*-1]
            lista_a_imprimir_copia[indice] = cadena_actual
        def cadena_seleccionada(cadena):
            # retorna True si la cadena esta seleccionada
            return (cadena[len(caracter_de_seleccion)*-1:] == caracter_de_seleccion)
        def redefinir(indice : int) -> None:
            # recibe el indice de la cadena que se quiere redefinir y la redefine
            cadena_actual = lista_a_imprimir_copia[indice]
            a = 0
            for i in lista_a_imprimir_copia:
                if cadena_seleccionada(i) and (i != cadena_actual):
                    sobreescribir_puntero(a)
                else:
                    a+=1
            lista_a_imprimir_copia[indice] = cadena_actual if cadena_seleccionada(cadena_actual) else cadena_actual + caracter_de_seleccion
        def mover_abajo(indice : int) -> None:
            # recibe el indice de la seleccion actual y mueve el cursor hacia abajo
            sobreescribir_puntero(indice)
            cadena_actual = lista_a_imprimir_copia[indice + 1] + caracter_de_seleccion
            lista_a_imprimir_copia[indice + 1] = cadena_actual
        def mover_arriba(indice : int) -> None:
            # recibe el indice de la cadena actual y mueve el cursor hacia arriba
            sobreescribir_puntero(indice)
            cadena_actual = lista_a_imprimir_copia[indice - 1] + caracter_de_seleccion
            lista_a_imprimir_copia[indice - 1] = cadena_actual
        def mover_al_principio(indice : int) -> None:
            # recibe el indice de la cadena actual y la mueve al inicio de la lista
            sobreescribir_puntero(indice)
            cadena_actual = lista_a_imprimir_copia[0] + caracter_de_seleccion
            lista_a_imprimir_copia[0] = cadena_actual
        def mover_al_final(indice : int) -> None:
            # recibe el indice de la cadena actual y la mueve al final de la lista
            sobreescribir_puntero(indice)
            cadena_actual = lista_a_imprimir_copia[-1] + caracter_de_seleccion
            lista_a_imprimir_copia[-1] = cadena_actual
    def main():
        redefinir(indice_de_comienzo)
        while True:
            system('clear')
            print('\n\n\n\t\t\t\t\t\t' + mensaje + '\n\n\n' if mensaje != None else '')
            if len(lista_a_imprimir_copia) >= 30:
                # codigo en caso de que la lista sea muy 
                # larga para que se imprima horizontalmente
                i = 0
                for cadena in lista_a_imprimir_copia:
                    if i == 5:
                        print()
                        i = 0
                    print(f'{caracter_de_guionizacion}   {cadena:30}', end='')
                    i+=1
                print()
            else:
                caracter_de_guionizacion_para_cadena_seleccionada = caracter_de_guionizacion
                if efecto_de_movimiento:
                    caracter_de_guionizacion_para_cadena_seleccionada  = '   ' + caracter_de_guionizacion 
                for cadena in lista_a_imprimir_copia:
                    if cadena_seleccionada(cadena):
                        if color_para_linea_seleccionada:
                            print(f'{Fore.BLACK}{Back.WHITE}{caracter_de_guionizacion_para_cadena_seleccionada}   {cadena[:len(caracter_de_seleccion)*-1]}        {Fore.RESET}{Back.RESET}')                    
                        else:
                            print(f'{caracter_de_guionizacion_para_cadena_seleccionada}   {cadena}')                    
                    else:
                        print(f'{caracter_de_guionizacion}   {cadena}')
            entrada = getch().lower()
            if len(lista_a_imprimir_copia) == 1:
                if entrada == caracter_de_ejecucion:
                    return seleccion_actual() + 1   
                else:
                    pass    
            else:
                indice_de_seleccion_actual = seleccion_actual()
                if isinstance(indice_de_seleccion_actual, bool):
                    # comprobacion en caso de que la funcion no logre encontrar la seleccion actual
                    # en caso de que no se encuentre, no se movera el cursor 
                    pass
                else:
                    if entrada == caracter_arriba:
                                if indice_de_seleccion_actual == 0:
                                    mover_al_final(indice_de_seleccion_actual)
                                else:
                                    mover_arriba(indice_de_seleccion_actual)
                    elif entrada == caracter_abajo:
                                if indice_de_seleccion_actual == len(lista_a_imprimir_copia) - 1:
                                    mover_al_principio(indice_de_seleccion_actual)
                                else:
                                    mover_abajo(indice_de_seleccion_actual)
                    elif entrada == caracter_de_ejecucion:
                            return seleccion_actual() + 1
    return main()
